%{
#include <iostream>
#include <map>
#include <string>
#include "parserlib.h"

#define YYSTYPE std::string

int yylex(void);
int yyerror(char* msg);

BundleContainer container;

%}

%token KW_DEFINE KW_EXECUTION KW_SEND KW_FROM KW_TO KW_RUN KW_ON KW_RANKS KW_DF

%token VARIABLE NUMBER

%token LCB RCB LSB RSB

%token EQUAL SEMICOLON BUCK

%token KW_FOR KW_DOUBLE_DOT

%%
input: KW_DEFINE LCB define_context RCB KW_EXECUTION LCB execution_context RCB {
     ExecutionContext* mainContext = container.getContextByUUID($7);
     container.setMainContext(mainContext);
};

define_context: %empty | const_def | define_context const_def;

const_def: VARIABLE EQUAL NUMBER SEMICOLON {
     container.registerMacroVar($1, $3);
};

execution_context: 
     %empty {
          ExecutionContext* context = new ExecutionContext();
          std::string uuid = container.registerNewContext(context);
          $$ = uuid;
     } | execution_subblock {
          IExecuteSubblock* block = container.getBlockByUUID($1);
          ExecutionContext* context = new ExecutionContext(); 
          context->addBlock(block);
          std::string uuid = container.registerNewContext(context);
          $$ = uuid;
     } | execution_context execution_subblock {
          ExecutionContext* context = container.getContextByUUID($1);
          IExecuteSubblock* block = container.getBlockByUUID($2);
          context->addBlock(block);
          $$ = $1;
     };

execution_subblock: 
     run_block         { $$ = $1; } 
     | send_block      { $$ = $1; } 
     | define_df_block { $$ = $1; }
     | for_block       { $$ = $1; }
;

for_block: KW_FOR VARIABLE EQUAL NUMBER KW_DOUBLE_DOT NUMBER LCB execution_context RCB {
     ForSubblock* block = new ForSubblock();
     ExecutionContext* context = container.getContextByUUID($8);
     block->setIteratorName($2);
     block->setStartIndex(std::stol($4));
     block->setEndIndex(std::stol($6));
     block->setBody(context);
     std::string uuid = container.registerNewBlock(block);
     $$ = uuid;
};

send_block: KW_SEND VARIABLE KW_FROM NUMBER KW_TO NUMBER SEMICOLON {
     SendSubblock * block = new SendSubblock();
     block->setDFName($2);
     block->setFromRank($4);
     block->setToRank($6);
     std::string uuid = container.registerNewBlock(block);
     $$ = uuid;
};

run_block: KW_RUN task_name KW_ON KW_RANKS NUMBER SEMICOLON {
     RunSubblock * block = new RunSubblock();
     TaskDescriptor* taskDescriptor = container.getTaskByUUID($2);
     block->setCfName(taskDescriptor->getName());
     block->setRank($5);
     std::string uuid = container.registerNewBlock(block);
     $$ = uuid;
};

define_df_block: KW_DEFINE KW_DF VARIABLE SEMICOLON {
     DefineDataFragmentSubblock * block = new DefineDataFragmentSubblock();
     block->setName($3);
     std::string uuid = container.registerNewBlock(block);
     $$ = uuid;
};

task_name: VARIABLE {
     TaskDescriptor* task = new TaskDescriptor();
     task->addNamePart($1);
     std::string uuid = container.registerNewTask(task);
     $$ = uuid; 
} | task_name LSB NUMBER RSB {
     TaskDescriptor* task = container.getTaskByUUID($1);
     task->addNamePart($3);
     $$ = $1;
};
%%