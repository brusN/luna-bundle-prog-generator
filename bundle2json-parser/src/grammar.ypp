%{
#include <iostream>
#include <map>
#include <string>
#include "parserlib.h"

#define YYSTYPE std::string

int yylex(void);
int yyerror(char* msg);

BundleContainer container;

%}

%token KW_DEFINE KW_EXECUTION KW_SEND KW_FROM KW_TO KW_RUN KW_ON KW_RANKS KW_DF

%token VARIABLE NUMBER

%token LCB RCB LSB RSB

%token EQUAL SEMICOLON BUCK

%token FOR KW_DOUBLE_DOT

%%
input: KW_DEFINE LCB define_context RCB KW_EXECUTION LCB execution_context RCB
     | KW_EXECUTION LCB execution_context RCB
     | KW_DEFINE LCB RCB KW_EXECUTION LCB execution_context RCB
     | KW_DEFINE LCB define_context RCB KW_EXECUTION LCB RCB
     | KW_DEFINE LCB RCB KW_EXECUTION LCB RCB
     ;

define_context: const_def | define_context const_def;

const_def: VARIABLE EQUAL NUMBER SEMICOLON {
     container.getDefines().insert(std::make_pair($1, $3));
};

execution_context: execution_subblock | execution_context execution_subblock;

execution_subblock: run_block | send_block | define_df_block | for_block;

for_block: KW_FOR VARIABLE EQUAL NUMBER KW_DOUBLE_DOT NUMBER LCB execution_context RCB;

send_block: KW_SEND VARIABLE KW_FROM NUMBER KW_TO NUMBER SEMICOLON {
     SendSubblock * block = new SendSubblock();
     block->setDFName($2);
     block->setFromRank(std::stoi($4));
     block->setToRank(std::stoi($6));
     container.getExecuteBlocks().push_back(block);
};

run_block: KW_RUN task_name KW_ON KW_RANKS NUMBER SEMICOLON {
     RunSubblock * block = new RunSubblock();
     block->setTask($2);
     block->setRank(std::stoi($5));
     container.getExecuteBlocks().push_back(block);
};

define_df_block: KW_DEFINE KW_DF VARIABLE SEMICOLON {
     DefineDataFragmentBlock * block = new DefineDataFragmentBlock();
     block->setName($3);
     container.getExecuteBlocks().push_back(block);
};

task_name: VARIABLE | task_name LSB NUMBER RSB;

%%