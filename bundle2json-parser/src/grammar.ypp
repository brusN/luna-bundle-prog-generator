%{
#include <iostream>
#include <cstdlib>
#include <map>
#include <string>
#include "parserlib.h"

#define YYSTYPE std::string

int yylex();
int yyerror(char* msg);

BundleContainer container;

%}

%token KW_DEFINE KW_EXECUTION KW_SEND KW_FROM KW_TO KW_RUN KW_ON KW_RANK KW_DF

%token VARIABLE NUMBER

%token LCB RCB LSB RSB LP RP

%token EQUAL SEMICOLON BUCK

%token KW_FOR KW_DOUBLE_DOT

%token PLUS MINUS MUL DIV

%%
input: KW_DEFINE LCB define_context RCB KW_EXECUTION LCB execution_context RCB {
     ExecutionContext* mainContext = container.getContextByUUID($7);
     container.setMainContext(mainContext);
};

define_context: %empty | const_def | define_context const_def;

const_def: VARIABLE EQUAL NUMBER SEMICOLON {
     container.registerMacroVar($1, $3);
};

execution_context: 
     %empty {
          ExecutionContext* context = new ExecutionContext();
          std::string uuid = container.registerNewContext(context);
          $$ = uuid;
     } | execution_subblock {
          IExecuteSubblock* block = container.getBlockByUUID($1);
          ExecutionContext* context = new ExecutionContext(); 
          context->addBlock(block);
          std::string uuid = container.registerNewContext(context);
          $$ = uuid;
     } | execution_context execution_subblock {
          ExecutionContext* context = container.getContextByUUID($1);
          IExecuteSubblock* block = container.getBlockByUUID($2);
          context->addBlock(block);
          $$ = $1;
     };

execution_subblock: 
     run_block         { $$ = $1; } 
     | send_block      { $$ = $1; } 
     | define_df_block { $$ = $1; }
     | for_block       { $$ = $1; }
;

for_block: KW_FOR VARIABLE EQUAL int_expr KW_DOUBLE_DOT int_expr LCB execution_context RCB {
     ForSubblock* block = new ForSubblock();
     ExecutionContext* context = container.getContextByUUID($8);
     block->setIteratorName($2);
     block->setStartIndex(container.getExpressionByUUID($4));
     block->setEndIndex(container.getExpressionByUUID($6));
     block->setBody(context);
     std::string uuid = container.registerNewBlock(block);
     $$ = uuid;
};

send_block: KW_SEND df_name KW_FROM int_expr KW_TO int_expr SEMICOLON {
     SendSubblock * block = new SendSubblock();
     block->setDFD(container.getDFDByUUID($2));
     block->setFromRank(container.getExpressionByUUID($4));
     block->setToRank(container.getExpressionByUUID($6));
     std::string uuid = container.registerNewBlock(block);
     $$ = uuid;
};

run_block: KW_RUN task_name KW_ON KW_RANK int_expr SEMICOLON {
     RunSubblock * block = new RunSubblock();
     TaskDescriptor* taskDescriptor = container.getTaskByUUID($2);
     block->setCf(taskDescriptor);
     block->setRank(container.getExpressionByUUID($5));
     std::string uuid = container.registerNewBlock(block);
     $$ = uuid;
};

define_df_block: KW_DEFINE KW_DF VARIABLE SEMICOLON {
     DefineDataFragmentSubblock * block = new DefineDataFragmentSubblock();
     block->setName($3);
     std::string uuid = container.registerNewBlock(block);
     $$ = uuid;
};

task_name: VARIABLE {
     TaskDescriptor* task = new TaskDescriptor();
     task->setBaseName($1);
     std::string uuid = container.registerNewTask(task);
     $$ = uuid; 
} | task_name LSB int_expr RSB {
     TaskDescriptor* task = container.getTaskByUUID($1);
     task->addRef(container.getExpressionByUUID($3));
     $$ = $1;
};

df_name: VARIABLE {
     DFDescriptor* dfd = new DFDescriptor();
     dfd->setBaseName($1);
     std::string uuid = container.registerNewDFD(dfd);
     $$ = uuid;
} | df_name LSB int_expr RSB {
     DFDescriptor* dfd = container.getDFDByUUID($1);
     dfd->addRef(container.getExpressionByUUID($3));
     $$ = $1;
};

macro_var: BUCK VARIABLE {
     std::string value = container.getMacroVarValueByName($2);
     $$ = value;   
};

int_expr:
    term {
        $$ = $1;
    } | int_expr PLUS term {
        IIntExpression* leftOperand = container.getExpressionByUUID($1);
        IIntExpression* rightOperand = container.getExpressionByUUID($3);
        OperationIntExpression* expr = new OperationIntExpression($2, leftOperand, rightOperand);
        std::string uuid = container.registerNewExpression(expr);
        $$ = uuid;
    } | int_expr MINUS term {
        IIntExpression* leftOperand = container.getExpressionByUUID($1);
        IIntExpression* rightOperand = container.getExpressionByUUID($3);
        OperationIntExpression* expr = new OperationIntExpression($2, leftOperand, rightOperand);
        std::string uuid = container.registerNewExpression(expr);
        $$ = uuid;
    }
;

term:
    factor {
        $$ = $1;
    } | term MUL factor {
        IIntExpression* leftOperand = container.getExpressionByUUID($1);
        IIntExpression* rightOperand = container.getExpressionByUUID($3);
        OperationIntExpression* expr = new OperationIntExpression($2, leftOperand, rightOperand);
        std::string uuid = container.registerNewExpression(expr);
        $$ = uuid;
    } | term DIV factor {
        IIntExpression* leftOperand = container.getExpressionByUUID($1);
        IIntExpression* rightOperand = container.getExpressionByUUID($3);
        OperationIntExpression* expr = new OperationIntExpression($2, leftOperand, rightOperand);
        std::string uuid = container.registerNewExpression(expr);
        $$ = uuid;
    }
;

factor:
    NUMBER {
        ConstIntExpression* expr = new ConstIntExpression(std::stoi($1));
        std::string uuid = container.registerNewExpression(expr);
        $$ = uuid;
    } | macro_var {
        ConstIntExpression* expr = new ConstIntExpression(std::stoi($1));
        std::string uuid = container.registerNewExpression(expr);
        $$ = uuid;
    } | VARIABLE {
        VarIntExpression* expr = new VarIntExpression($1);
        std::string uuid = container.registerNewExpression(expr);
        $$ = uuid;
    }
;

%%